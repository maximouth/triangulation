#define pwmA (3)
#define pwmB (11)

#define dirA (12)
#define dirB (13)

#define brkA (9)
#define brkB (8)

#define alimA (38)
#define alimB (39)

#define encoderA1 (48)
#define encoderA2 (49)
#define encoderB1 (30)
#define encoderB2 (31)

void setup () {

  //Serial.begin (9600);
  
  /* Set pins for both directions and brakes as outputs. */
  pinMode (pwmA, OUTPUT) ;
  pinMode (pwmB, OUTPUT) ;
  pinMode (dirA, OUTPUT) ;
  pinMode (dirB, OUTPUT) ;
  pinMode (brkA, OUTPUT) ;
  pinMode (brkB, OUTPUT) ;

  /* Set the encoder whell pins as inputs  */
  pinMode (alimA, OUTPUT) ;
  pinMode (alimB, OUTPUT) ;
  pinMode (encoderA1, INPUT) ;
  pinMode (encoderA2, INPUT) ;
  pinMode (encoderB1, INPUT) ;
  pinMode (encoderB2, INPUT) ;
  

  digitalWrite (alimA, HIGH);
  digitalWrite (alimB, HIGH);
  
  /* attacher interruptions aux encodeurs de s roues  */
  attachInterrupt(digitalPinToInterrupt(encoderA1), countA, RISING);
  attachInterrupt(digitalPinToInterrupt(encoderA2), countA, RISING); 
  attachInterrupt(digitalPinToInterrupt(encoderB1), countB, RISING);
  attachInterrupt(digitalPinToInterrupt(encoderB2), countB, RISING); 

  /* demarrer les moteurs */
  digitalWrite(dirA, HIGH);
  digitalWrite(dirB, HIGH);

  digitalWrite(brkA, LOW);
  digitalWrite(brkB, LOW);

  analogWrite (pwmA, 250);
  analogWrite (pwmB, 250);
  
}

volatile int cptA = 0;
volatile int cptB = 0;

void countA () {
  cptA ++;
  return;
}

void countB () {
  cptB ++;
  return;
}



void loop () {
  if (((cptA * 0.003) >= 1) || (cptB * 0.003) >= 1) {
    analogWrite(pwmA, 0);
    analogWrite(pwmB, 0);
  }
  
}

